import time
from datetime import datetime

import disnake
import psycopg2


class DatabaseManagerSS14:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö Space Station 14 (PostgreSQL).
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ë–î –ø—Ä–æ–µ–∫—Ç–∞:
    - –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (main)
    - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (dev)
    
    Attributes
    ----------
    db_params : dict
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ë–î –ø—Ä–æ–µ–∫—Ç–∞.
        –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è 'main' –∏ 'dev' –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.
        
    Examples
    --------
    >>> db_manager = DatabaseManagerSS14()
    >>> player_data = db_manager.fetch_player_data("PlayerName")
    """
    def __init__(self, db_configs=None):
        """
        Parameters
        ----------
        db_configs : dict, optional
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –ë–î. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π.
        """
        self.db_params = db_configs or {}
        self.time_zone = None

    def add_database(self, name, db_config):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.db_params[name] = db_config

    def add_time_zone(self, time_zone):
        if time_zone:
            self.time_zone = time_zone
        else:
            print("Time zone not set")


    def _get_connection(self, db_name='main'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if db_name not in self.db_params:
            raise ValueError(f"Unknown database name: {db_name}")

        return psycopg2.connect(**self.db_params[db_name])


    def get_tables_size(self, db_name='main'):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Ö —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –æ–±—â–∏–π –æ–±—ä—ë–º

        Parameters
        ----------
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev'), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'

        Returns
        -------
        tuple
            (list_of_tables, total_size) –≥–¥–µ:
            - list_of_tables: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            - total_size: –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        query = """
        SELECT 
            table_name,
            pg_size_pretty(pg_total_relation_size(quote_ident(table_name))) as size,
            pg_total_relation_size(quote_ident(table_name)) as size_bytes
        FROM 
            information_schema.tables
        WHERE 
            table_schema = 'public'
        ORDER BY 
            size_bytes DESC;
        """

        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    cursor.execute(query)
                    tables = [
                        {'table': row[0], 'size': row[1]}
                        for row in cursor.fetchall()
                    ]

                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã
                    cursor.execute("SELECT pg_size_pretty(pg_database_size(current_database()))")
                    total_size = cursor.fetchone()[0]

                    return tables, total_size
        except Exception as e:
            print(f"Error getting tables size: {e}")
            return [], "0 bytes"


    def fetch_discord_admins(self, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ Discord
        
        Parameters
        ----------
        db_name : str
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev')
            
        Returns
        -------
        list
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (discord_id, game_username, title, rank_name)
        """
        query = """
        SELECT 
            du.discord_id,
            p.last_seen_user_name AS game_username,
            a.title,
            ar.name AS rank_name
        FROM discord_user du
        JOIN player p ON du.user_id = p.user_id
        JOIN admin a ON du.user_id = a.user_id
        LEFT JOIN admin_rank ar ON a.admin_rank_id = ar.admin_rank_id
        ORDER BY p.last_seen_user_name ASC
        """

        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    cursor.execute(query)
                    return cursor.fetchall()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            return []


    def check_connection(self, db_name='main') -> tuple[bool, float, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å.
        
        Parameters
        ----------
        db_name : str
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ('main' –∏–ª–∏ 'dev')
            
        Returns
        -------
        tuple[bool, float, str]
            - bool: –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            - float: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            - str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ)
        """
        try:
            start_time = time.time()
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT 1")
            ping_time = (time.time() - start_time) * 1000
            return True, ping_time, ""
        except Exception as e:
            return False, 0.0, str(e)


    def get_connection_status_report(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–æ –≤—Å–µ–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö.
        
        Returns
        -------
        str
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ Markdown
        """
        report_lines = ["üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:**"]

        for db_name in self.db_params.keys():
            success, ping_time, error = self.check_connection(db_name)
            if success:
                report_lines.append(
                    f"‚úÖ `{db_name}`: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ | –ü–∏–Ω–≥: {ping_time:.2f}–º—Å"
                )
            else:
                report_lines.append(
                    f"‚ùå `{db_name}`: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {error}"
                )

        return "\n".join(report_lines)


    def fetch_player_data(self, user_name, db_name='main'):
        """
        –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –∏–ª–∏ –ª–æ–≥–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
        
        –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
        1. –í —Ç–∞–±–ª–∏—Ü–µ player –ø–æ –ø–æ–ª—é last_seen_user_name
        2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤ —Ç–∞–±–ª–∏—Ü–µ connection_log –ø–æ –ø–æ–ª—é user_name
        
        Parameters
        ----------
        user_name : str
            –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: 
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            - 'dev' - –±–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        
        Returns
        ----------
        tuple or None
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Ç–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è:
            - –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ player: 
            (player_id, user_id, first_seen_time, last_seen_user_name)
            - –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ connection_log:
            (connection_log_id, user_id, user_name)
            - None –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT player_id, user_id, first_seen_time, last_seen_user_name
                FROM player
                WHERE last_seen_user_name = %s
                """
                cursor.execute(query, (user_name,))
                result = cursor.fetchone()

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ player, –∏—â–µ–º –≤ connection_log
                if result is None:
                    query = """
                    SELECT connection_log_id, user_id, user_name
                    FROM connection_log
                    WHERE user_name = %s
                    """
                    cursor.execute(query, (user_name,))
                    result = cursor.fetchone()

        return result


    def is_user_linked(self, user_id, discord_id, db_name='main'):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π discord_id –∏–ª–∏ user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Parameters
        ----------
        user_id : str
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        discord_id : str
            Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ snowflake ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: 
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            - 'dev' - –±–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

        Returns
        ----------
        bool
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω (–Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ discord_id –∏–ª–∏ user_id), 
            –∏–Ω–∞—á–µ False
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ discord_id –≤ –±–∞–∑–µ
                cursor.execute(
                    "SELECT 1 FROM discord_user WHERE discord_id = %s",
                    (str(discord_id),)
                )
                result_discord_id = cursor.fetchone()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ user_id –≤ –±–∞–∑–µ
                cursor.execute("SELECT 1 FROM discord_user WHERE user_id = %s", (user_id,))
                result_user_id = cursor.fetchone()

                return bool(result_discord_id or result_user_id)


    def link_user_to_discord(self, user_id, discord_id, db_name='main'):
        """
        –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤—è–∑–∫–µ Discord –≤ –ë–î
        
        Parameters
        ----------
        
        user_id : str
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        discord_id : str
            Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ snowflake ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: 
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            - 'dev' - –±–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º discord_user_id
                cursor.execute("SELECT COALESCE(MAX(discord_user_id), 0) FROM discord_user")
                max_id = cursor.fetchone()[0]
                next_id = max_id + 1

                query = """
                INSERT INTO discord_user (discord_user_id, user_id, discord_id)
                VALUES (%s, %s, %s)
                """
                cursor.execute(query, (next_id, user_id, discord_id))
            conn.commit()


    def unlink_user_from_discord(self, discord: disnake.Member, db_name='main'):
        """
        –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤—è–∑–∫–∏ Discord –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î
        
        Parameters
        ----------
        
        user_id : str
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        discord_id : str
            Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ snowflake ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: 
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            - 'dev' - –±–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

        Returns
        ----------
        str
            user_id –µ—Å–ª–∏ –æ—Ç–≤—è–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "DELETE FROM discord_user WHERE discord_id = %s RETURNING user_id", 
                    (str(discord.id),)
                )
                result = cursor.fetchone()
                conn.commit()
                return result[0] if result else None


    def get_user_id_by_discord_id(self, discord_id: str, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç user_id –∏–∑ –∏–≥—Ä–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ discord_user,
        –≤–æ–∑–≤—Ä–∞—â–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π user_id –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ Discord ID.

        Parameters
        ----------
        discord_id : str
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord (—Å–Ω–µ–∂–∏–Ω–∫–∞/Snowflake ID)
            –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: "123456789012345678"
        
        db_name : str, optional
            –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'.
            –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            - 'dev' - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

        Returns
        -------
        str | None
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞.
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT user_id FROM discord_user WHERE discord_id = %s", 
                    (discord_id,))
                result = cursor.fetchone()
                return result[0] if result else None

    def is_admin(self, user_id: int, db_name='main'):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Parameters
        ----------
        user_id : int
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
            –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.
        
        db_name : str, optional
            –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'.
            –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            - 'dev' - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

        Returns
        -------
        bool
            True - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞,
            False - –µ—Å–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM admin WHERE user_id = %s", 
                    (user_id,))
                result = cursor.fetchone()
                return result is not None

    def get_username_by_user_id(self, user_id, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ player,
        –≤–æ–∑–≤—Ä–∞—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ last_seen_user_name –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ user_id.

        Parameters
        ----------
        user_id : str
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
            –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ ID —á–∏—Å–ª–æ–≤–æ–π.
        
        db_name : str, optional
            –¶–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'.
            –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            - 'dev' - —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

        Returns
        -------
        str | None
            - –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            - None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        """
        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    query = """
                    SELECT last_seen_user_name 
                    FROM player 
                    WHERE user_id = %s
                    """
                    cursor.execute(query, (user_id,))
                    result = cursor.fetchone()
                    return result[0] if result else None
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
            return None

    def get_user_id_by_username(self, last_seen_user_name, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç user_id  –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º—É.

        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ player,
        –≤–æ–∑–≤—Ä–∞—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ user_id –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ last_seen_user_name.

        Parameters
        ----------
        last_seen_user_name. : str
            –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
            –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        
        db_name : str, optional
            –¶–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'.
            –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
            - 'main' - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            - 'dev' - —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

        Returns
        -------
        str | None
            - user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            - None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        """
        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    query = """
                    SELECT user_id 
                    FROM player 
                    WHERE last_seen_user_name = %s
                    """
                    cursor.execute(query, (last_seen_user_name,))
                    result = cursor.fetchone()
                    return result[0] if result else None
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
            return None

    def fetch_player_notes_by_username(self, username, db_name='main'):
        """
            –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –ë–î
        """
        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    query = """
                    SELECT 
                        admin_notes.admin_notes_id,
                        admin_notes.created_at,
                        admin_notes.message,
                        admin_notes.severity,
                        admin_notes.secret,
                        admin_notes.last_edited_at,
                        admin_notes.last_edited_by_id,
                        player.player_id,
                        player.last_seen_user_name,
                        admin.created_by_name
                    FROM admin_notes
                    INNER JOIN player ON admin_notes.player_user_id = player.user_id
                    LEFT JOIN (
                        SELECT user_id AS created_by_id, last_seen_user_name AS created_by_name
                        FROM player
                    ) AS admin ON admin_notes.created_by_id = admin.created_by_id
                    WHERE player.last_seen_user_name = %s;
                    """
                    cursor.execute(query, (username,))
                    result = cursor.fetchall()
                    return result
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
            return None

    def get_baninfo_by_ban_id(self, ban_id, db_name='main'):
        """
            –í–æ–∑—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ –ø–æ –∞–π–¥–∏ –±–∞–Ω–∞
        Args:
            ban_id (str): –ê–π–¥–∏ –±–∞–Ω–∞
            db_name (str, optional): –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev'), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT player_user_id, address, ban_time, expiration_time, reason, banning_admin, round_id
                FROM server_ban
                WHERE server_ban_id = %s
                """
                cursor.execute(query, (ban_id,))
                result = cursor.fetchone()
                return result

    def fetch_banlist_by_username(self, username, db_name='main'):
        """
            –í–æ–∑—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤ –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –Ω–∏–∫–Ω–µ–π–º—É
        """
        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    query = """
                    SELECT 
                        sb.server_ban_id, 
                        sb.ban_time, 
                        sb.expiration_time, 
                        sb.reason, 
                        COALESCE(p.last_seen_user_name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') AS admin_nickname,
                        ub.unban_time,
                        COALESCE(p2.last_seen_user_name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') AS unban_admin_nickname
                    FROM server_ban sb
                    LEFT JOIN player p ON sb.banning_admin = p.user_id
                    LEFT JOIN server_unban ub ON sb.server_ban_id = ub.ban_id
                    LEFT JOIN player p2 ON ub.unbanning_admin = p2.user_id
                    WHERE sb.player_user_id = (
                        SELECT user_id FROM player WHERE last_seen_user_name = %s
                    )
                    ORDER BY sb.server_ban_id ASC
                    """
                    cursor.execute(query, (username,))
                    result = cursor.fetchall()
                    return result
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
            return None

    def pardon_ban(
        self,
        ban_id: int,
        admin_user_id: str,
        db_name: str = 'main'
        ) -> tuple[bool, str]:
        """
        –°–Ω–∏–º–∞–µ—Ç –±–∞–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±–∞–Ω–µ –≤ –ë–î.

        Parameters
        ----------
        ban_id : int
            ID –±–∞–Ω–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è
        admin_user_id : str
            UUID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–Ω–∏–º–∞—é—â–µ–≥–æ –±–∞–Ω
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev'), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'

        Returns
        -------
        tuple[bool, str]
            –ö–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏:
            - bool: –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            - str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        """
        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–Ω–∞
                    cursor.execute(
                        "SELECT 1 FROM server_ban WHERE server_ban_id = %s", 
                        (ban_id,)
                    )
                    if not cursor.fetchone():
                        return False, f"‚ùå –û—à–∏–±–∫–∞: –ë–∞–Ω —Å ID `{ban_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–Ω—è—Ç –ª–∏ —É–∂–µ –±–∞–Ω
                    cursor.execute(
                        "SELECT 1 FROM server_unban WHERE ban_id = %s", 
                        (ban_id,)
                    )
                    if cursor.fetchone():
                        return False, f"‚ö†Ô∏è –ë–∞–Ω —Å ID `{ban_id}` —É–∂–µ –±—ã–ª —Å–Ω—è—Ç —Ä–∞–Ω–µ–µ."

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    cursor.execute(
                        "SELECT last_seen_user_name FROM player WHERE user_id = %s",
                        (admin_user_id,)
                    )
                    admin_data = cursor.fetchone()

                    if not admin_data:
                        return False, (
                            f"‚ùå –û—à–∏–±–∫–∞: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å user_id `{admin_user_id}` "
                            "–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–≥—Ä–æ–∫–æ–≤."
                        )

                    admin_name = admin_data[0]

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (MSK)
                    unban_time = (
                        datetime
                        .now(self.time_zone)
                        .strftime('%Y-%m-%d %H:%M:%S.%f')[:-3] + " +0300"
                    )

                    # –ó–∞–ø–∏—Å—å –≤ server_unban
                    cursor.execute(
                        """
                        INSERT INTO server_unban (ban_id, unbanning_admin, unban_time)
                        VALUES (%s, %s, %s::timestamptz)
                        """,
                        (ban_id, admin_user_id, unban_time)
                    )
                    conn.commit()

                    return True, (
                        f"‚úÖ –ë–∞–Ω —Å ID `{ban_id}` —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç "
                        f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º `{admin_name}`."
                    )

        except psycopg2.Error as e:
            conn.rollback()
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞: {e}") from e


    def fetch_admin_info(self, nickname, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –ø–æ –Ω–∏–∫—É.
        
        Parameters
        ----------
        nickname : str
            –ù–∏–∫–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        db_name : str, optional
            –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ ('main' –∏–ª–∏ 'dev').
        
        Returns
        -------
        tuple or None
            (title, rank_name) –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None.
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT a.title, ar.name
                FROM public.admin a
                JOIN public.admin_rank ar ON a.admin_rank_id = ar.admin_rank_id
                JOIN public.player p ON a.user_id = p.user_id
                WHERE p.last_seen_user_name ILIKE %s
                """
                cursor.execute(query, (nickname,))
                return cursor.fetchone()

    def get_user_id_admin_by_username(self, nickname, db_name='main'):
        """
        –í–æ–∑—Ä–∞—â–∞–µ—Ç user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –µ–≥–æ –Ω–∏–∫—É
        Args:
            nickname (str): –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
            db_name (str, optional): –ò–º—è –ë–î. Defaults to 'main'.
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT a.user_id FROM public.admin a
                JOIN public.player p ON a.user_id = p.user_id
                WHERE p.last_seen_user_name ILIKE %s
                """
                cursor.execute(query, (nickname,))
                result = cursor.fetchone()

                return result

    def fetch_admin_rank(self, admin_rank, db_name='main'):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
        Args:
            admin_rank (str):
            db_name (str, optional): –ù–∞–∑–≤–∞–Ω–∏–µ –ë–î –≤ –∫–æ—Ç–æ—Ä—É—é –º—ã –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å. Defaults to 'main'.
        Returns:
            –í—ã–≤–æ–¥–∏—Ç admin_rank_id, –∏–ª–∏ None –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT admin_rank_id
                FROM public.admin_rank
                WHERE name ILIKE %s
                """
                cursor.execute(query, (admin_rank,))
                result = cursor.fetchone()

                return result

    def fetch_admin_ranks(self, db_name='main'):
        """
        –í–æ–∑—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–≤ –Ω–∞ –ú–†–ü –∏–ª–∏ –î–µ–≤ —Å–µ—Ä–≤–µ—Ä–µ
        Args:
            db_name (str, optional): –ò–º—è –ë–î –∫ –∫–æ—Ç–æ—Ä–æ–π –º—ã –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å. Defaults to 'main'.
        Returns:
            list: –í–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–æ–≤ —Å –∏—Ö –∞–π–¥–∏ –∏ –∏–º–µ–Ω–µ–º
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT admin_rank_id, name
                FROM public.admin_rank ORDER BY admin_rank_id ASC
                """
                cursor.execute(query)
                result = cursor.fetchall()

                return result

    def fetch_admins(self, db_name='main'):
        """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                # SQL-–∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ Discord
                query = """
                SELECT 
                    p.last_seen_user_name, 
                    a.title, 
                    ar.name, 
                    du.discord_id
                FROM public.admin a  
                JOIN public.admin_rank ar ON a.admin_rank_id = ar.admin_rank_id
                LEFT JOIN public.player p ON a.user_id = p.user_id
                LEFT JOIN public.discord_user du ON a.user_id = du.user_id
                ORDER BY p.last_seen_user_name ASC
                """
                cursor.execute(query)
                admins = cursor.fetchall()

                return admins

    def permission_add_admin(self, user_id, title, rank, db_name='main'):
        """
        –° –ø–æ–º–æ—â—å—é INSERT –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
        –¢–µ–º —Å–∞–º—ã–º –≤—ã–¥–∞–≤–∞—è –µ–º—É –ø—Ä–∞–≤–∞
        Args:
            user_id (str): user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Å14
            title (str): –ü–æ–¥–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            rank (str): Id –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–∞
            db_name (str, optional): –ò–º—è –ë–î. Defaults to 'main'.
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                INSERT INTO
                public.admin (user_id, title, admin_rank_id)
                VALUES (%s, %s, %s)
                """
                cursor.execute(query, (user_id, title, rank))

    def permission_tweak_admin(self, title, rank, user_id, db_name='main'):
        """
        –ò–∑–º–µ–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        Args:
            title (str): –ü–æ–¥–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            rank (str): Id –∞–¥–º–∏–Ω —Ä–∞–Ω–≥–∞
            user_id (str): user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Å14
            db_name (str, optional): –ò–º—è –ë–î. Defaults to 'main'.
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                UPDATE public.admin
                SET title = %s, admin_rank_id = %s WHERE user_id = %s
                """
                cursor.execute(query, (title, rank, user_id))

    def permission_delete_admin(self, admin_id, db_name='main'):
        """
        –£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –µ–≥–æ user_id
        Args:
            admin_id (str): admin_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Å14
            db_name (str, optional): –ò–º—è –ë–î. Defaults to 'main'.
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                DELETE FROM public.admin
                WHERE user_id = %s
                """
                cursor.execute(query, (admin_id,))

    def fetch_uploads(self, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ –ª–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∑–æ–∫ .ogg —Ñ–∞–π–ª–æ–≤

        Parameters
        ----------
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev'), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT ul.uploaded_resource_log_id, ul.date, p.last_seen_user_name, ul.path
                FROM public.uploaded_resource_log ul
                LEFT JOIN public.player p ON ul.user_id = p.user_id
                ORDER BY ul.date DESC
                """
                cursor.execute(query)
                return cursor.fetchall()


    def fetch_profiles_by_nickname(self, nickname, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ –æ –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ –Ω–∏–∫—É

        Parameters
        ----------
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev'), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT p.profile_id, p.preference_id, p.char_name, p.age, p.gender, p.species
                FROM profile p
                WHERE p.preference_id IN (
                    SELECT pr.preference_id
                    FROM preference pr
                    WHERE pr.user_id IN 
                    (SELECT pl.user_id FROM player pl WHERE pl.last_seen_user_name = %s)
                )
                ORDER BY p.profile_id ASC
                """
                cursor.execute(query, (nickname,))
                result = cursor.fetchall()
                return result if result else None

    def get_player_timestats_by_username(self, username, db_name='main'):
        """
            –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
        """
        try:
            with self._get_connection(db_name) as conn:
                with conn.cursor() as cursor:
                    query = """
                    SELECT 
                        play_time.tracker,
                        play_time.time_spent
                    FROM player
                    INNER JOIN play_time ON player.user_id = play_time.player_id
                    WHERE player.last_seen_user_name = %s;
                    """
                    cursor.execute(query, (username,))
                    result = cursor.fetchall()
                    return result
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
            return None

    def fetch_username_by_char_name(self, char_name, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

        Parameters
        ----------
        char_name : str
            –ò–º—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev'), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'
        
        Returns
        -------
        list of str or None
            –°–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT pl.last_seen_user_name
                FROM player pl
                WHERE pl.user_id IN (
                    SELECT pr.user_id
                    FROM preference pr
                    WHERE pr.preference_id IN (
                        SELECT p.preference_id
                        FROM profile p
                        WHERE p.char_name = %s
                    )
                )
                ORDER BY pl.last_seen_user_name ASC
                """
                cursor.execute(query, (char_name,))
                result = cursor.fetchall()
                return [row[0] for row in result] if result else None


    def fetch_profile_by_id(self, profile_id, db_name='main'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ –æ –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ –Ω–∏–∫—É

        Parameters
        ----------
        db_name : str, optional
            –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ('main' –∏–ª–∏ 'dev'), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main'
        """
        with self._get_connection(db_name) as conn:
            with conn.cursor() as cursor:
                query = """
                SELECT 
                    p.profile_id, p.slot, p.char_name, p.age, p.sex, p.hair_name, p.hair_color,
                    p.facial_hair_name, p.facial_hair_color, p.eye_color, p.skin_color, 
                    p.pref_unavailable, p.preference_id, p.gender, p.species, p.markings,
                    p.flavor_text, p.voice, p.erpstatus, p.spawn_priority, p.bark_pitch,
                    p.bark_proto, p.high_bark_var, p.low_bark_var
                FROM profile p
                WHERE p.profile_id = %s
                """
                cursor.execute(query, (profile_id,))
                result = cursor.fetchone()
                return result if result else None
